"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../src/constants");
const express = require("express");
const https = require("https");
const fs = require("fs");
function assertIsPositiveInteger(arg, label) {
    if (typeof arg !== 'number' &&
        arg !== parseInt('' + arg) &&
        typeof arg === 'number' &&
        arg <= 0)
        throw new Error(`expected ${label} to be a positive integer. Found: ${JSON.stringify(arg)}`);
}
function assertIsString(arg, label) {
    if (typeof arg !== 'string')
        throw new Error(`expected ${label} to be a string. Found: ${JSON.stringify(arg)}`);
}
function addRemoteCommand(y) {
    return y.command('remote', false, yarg => {
        yarg.option('port', {
            describe: 'port number where the remote host should be connected',
            default: constants_1.DEFAULT_REMOTE_PORT
        });
        yarg.option('cert', {
            describe: 'certificate details',
            required: true
        });
        yarg.option('key', {
            describe: 'private key details',
            required: true
        });
    }, argv => {
        const { port, cert, key } = argv;
        assertIsPositiveInteger(port, 'port');
        assertIsString(cert, 'cert');
        assertIsString(key, 'key');
        const app = express();
        const credentials = {
            key: key.replace(/\\n/g, '\n'),
            cert: cert.replace(/\\n/g, '\n')
        };
        app.get('/get_remote_certificate', (req, res) => {
            if (!fs.existsSync(constants_1.rootCACertPath)) {
                throw new Error(`Could not read the public certificate file ${constants_1.rootCACertPath}, please check the file exists and try again.`);
            }
            res.send(fs.readFileSync(constants_1.rootCACertPath, 'utf8'));
        });
        const httpsServer = https.createServer(credentials, app);
        const server = httpsServer.listen(port, () => console.log(`Server started at port: ${port}\n
        ---\n
        STATE: READY_FOR_CONNECTION\n
        ---\n`));
        app.get('/close_remote_server', (req, res) => {
            res.send(`Closing remote server`);
            server.close(() => {
                console.log(`Remote server closed successfully\n
          ---\n
          STATE: REMOTE_CONNECTION_CLOSED\n
          ---\n`);
            });
        });
    });
}
exports.default = addRemoteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJjbGkvY29tbWFuZHMvcmVtb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbURBQTBFO0FBQzFFLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IseUJBQXlCO0FBRXpCLFNBQVMsdUJBQXVCLENBQzlCLEdBQVksRUFDWixLQUFhO0lBRWIsSUFDRSxPQUFPLEdBQUcsS0FBSyxRQUFRO1FBQ3ZCLEdBQUcsS0FBSyxRQUFRLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUMxQixPQUFPLEdBQUcsS0FBSyxRQUFRO1FBQ3ZCLEdBQUcsSUFBSSxDQUFDO1FBRVIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLEtBQUsscUNBQXFDLElBQUksQ0FBQyxTQUFTLENBQ2xFLEdBQUcsQ0FDSixFQUFFLENBQ0osQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxHQUFZLEVBQUUsS0FBYTtJQUNqRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVE7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLEtBQUssMkJBQTJCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDbEUsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLENBQWlCO0lBQ3pDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FDZCxRQUFRLEVBQ1IsS0FBSyxFQUNMLElBQUksQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsUUFBUSxFQUFFLHVEQUF1RDtZQUNqRSxPQUFPLEVBQUUsK0JBQW1CO1NBQzdCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2xCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNqQixRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUNELElBQUksQ0FBQyxFQUFFO1FBQ0wsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLHVCQUF1QixDQUFDLElBQUksRUFBRSxNQUFNLENBQUMsQ0FBQztRQUN0QyxjQUFjLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQzdCLGNBQWMsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFDM0IsTUFBTSxHQUFHLEdBQUcsT0FBTyxFQUFFLENBQUM7UUFDdEIsTUFBTSxXQUFXLEdBQUc7WUFDbEIsR0FBRyxFQUFFLEdBQUcsQ0FBQyxPQUFPLENBQUMsTUFBTSxFQUFFLElBQUksQ0FBQztZQUM5QixJQUFJLEVBQUUsSUFBSSxDQUFDLE9BQU8sQ0FBQyxNQUFNLEVBQUUsSUFBSSxDQUFDO1NBQ2pDLENBQUM7UUFDRixHQUFHLENBQUMsR0FBRyxDQUFDLHlCQUF5QixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO1lBQzlDLElBQUksQ0FBQyxFQUFFLENBQUMsVUFBVSxDQUFDLDBCQUFjLENBQUMsRUFBRTtnQkFDbEMsTUFBTSxJQUFJLEtBQUssQ0FDYiw4Q0FBOEMsMEJBQWMsK0NBQStDLENBQzVHLENBQUM7YUFDSDtZQUNELEdBQUcsQ0FBQyxJQUFJLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQywwQkFBYyxFQUFFLE1BQU0sQ0FBQyxDQUFDLENBQUM7UUFDcEQsQ0FBQyxDQUFDLENBQUM7UUFFSCxNQUFNLFdBQVcsR0FBRyxLQUFLLENBQUMsWUFBWSxDQUFDLFdBQVcsRUFBRSxHQUFHLENBQUMsQ0FBQztRQUN6RCxNQUFNLE1BQU0sR0FBRyxXQUFXLENBQUMsTUFBTSxDQUFDLElBQUksRUFBRSxHQUFHLEVBQUUsQ0FDM0MsT0FBTyxDQUFDLEdBQUcsQ0FBQywyQkFBMkIsSUFBSTs7O2NBR3JDLENBQUMsQ0FDUixDQUFDO1FBRUYsR0FBRyxDQUFDLEdBQUcsQ0FBQyxzQkFBc0IsRUFBRSxDQUFDLEdBQUcsRUFBRSxHQUFHLEVBQUUsRUFBRTtZQUMzQyxHQUFHLENBQUMsSUFBSSxDQUFDLHVCQUF1QixDQUFDLENBQUM7WUFDbEMsTUFBTSxDQUFDLEtBQUssQ0FBQyxHQUFHLEVBQUU7Z0JBQ2hCLE9BQU8sQ0FBQyxHQUFHLENBQUM7OztnQkFHTixDQUFDLENBQUM7WUFDVixDQUFDLENBQUMsQ0FBQztRQUNMLENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUNGLENBQUM7QUFDSixDQUFDO0FBRUQsa0JBQWUsZ0JBQWdCLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyByb290Q0FDZXJ0UGF0aCwgREVGQVVMVF9SRU1PVEVfUE9SVCB9IGZyb20gJy4uLy4uL3NyYy9jb25zdGFudHMnO1xuaW1wb3J0ICogYXMgZXhwcmVzcyBmcm9tICdleHByZXNzJztcbmltcG9ydCAqIGFzIGh0dHBzIGZyb20gJ2h0dHBzJztcbmltcG9ydCAqIGFzIGZzIGZyb20gJ2ZzJztcblxuZnVuY3Rpb24gYXNzZXJ0SXNQb3NpdGl2ZUludGVnZXIoXG4gIGFyZzogdW5rbm93bixcbiAgbGFiZWw6IHN0cmluZ1xuKTogYXNzZXJ0cyBhcmcgaXMgbnVtYmVyIHtcbiAgaWYgKFxuICAgIHR5cGVvZiBhcmcgIT09ICdudW1iZXInICYmXG4gICAgYXJnICE9PSBwYXJzZUludCgnJyArIGFyZykgJiZcbiAgICB0eXBlb2YgYXJnID09PSAnbnVtYmVyJyAmJlxuICAgIGFyZyA8PSAwXG4gIClcbiAgICB0aHJvdyBuZXcgRXJyb3IoXG4gICAgICBgZXhwZWN0ZWQgJHtsYWJlbH0gdG8gYmUgYSBwb3NpdGl2ZSBpbnRlZ2VyLiBGb3VuZDogJHtKU09OLnN0cmluZ2lmeShcbiAgICAgICAgYXJnXG4gICAgICApfWBcbiAgICApO1xufVxuXG5mdW5jdGlvbiBhc3NlcnRJc1N0cmluZyhhcmc6IHVua25vd24sIGxhYmVsOiBzdHJpbmcpOiBhc3NlcnRzIGFyZyBpcyBzdHJpbmcge1xuICBpZiAodHlwZW9mIGFyZyAhPT0gJ3N0cmluZycpXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYGV4cGVjdGVkICR7bGFiZWx9IHRvIGJlIGEgc3RyaW5nLiBGb3VuZDogJHtKU09OLnN0cmluZ2lmeShhcmcpfWBcbiAgICApO1xufVxuXG5mdW5jdGlvbiBhZGRSZW1vdGVDb21tYW5kKHk6IHlhcmdzLkFyZ3Y8e30+KTogeWFyZ3MuQXJndjx7fT4ge1xuICByZXR1cm4geS5jb21tYW5kKFxuICAgICdyZW1vdGUnLFxuICAgIGZhbHNlLFxuICAgIHlhcmcgPT4ge1xuICAgICAgeWFyZy5vcHRpb24oJ3BvcnQnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAncG9ydCBudW1iZXIgd2hlcmUgdGhlIHJlbW90ZSBob3N0IHNob3VsZCBiZSBjb25uZWN0ZWQnLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX1JFTU9URV9QT1JUXG4gICAgICB9KTtcbiAgICAgIHlhcmcub3B0aW9uKCdjZXJ0Jywge1xuICAgICAgICBkZXNjcmliZTogJ2NlcnRpZmljYXRlIGRldGFpbHMnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB5YXJnLm9wdGlvbigna2V5Jywge1xuICAgICAgICBkZXNjcmliZTogJ3ByaXZhdGUga2V5IGRldGFpbHMnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBhcmd2ID0+IHtcbiAgICAgIGNvbnN0IHsgcG9ydCwgY2VydCwga2V5IH0gPSBhcmd2O1xuICAgICAgYXNzZXJ0SXNQb3NpdGl2ZUludGVnZXIocG9ydCwgJ3BvcnQnKTtcbiAgICAgIGFzc2VydElzU3RyaW5nKGNlcnQsICdjZXJ0Jyk7XG4gICAgICBhc3NlcnRJc1N0cmluZyhrZXksICdrZXknKTtcbiAgICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0ge1xuICAgICAgICBrZXk6IGtleS5yZXBsYWNlKC9cXFxcbi9nLCAnXFxuJyksXG4gICAgICAgIGNlcnQ6IGNlcnQucmVwbGFjZSgvXFxcXG4vZywgJ1xcbicpXG4gICAgICB9O1xuICAgICAgYXBwLmdldCgnL2dldF9yZW1vdGVfY2VydGlmaWNhdGUnLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgaWYgKCFmcy5leGlzdHNTeW5jKHJvb3RDQUNlcnRQYXRoKSkge1xuICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAgIGBDb3VsZCBub3QgcmVhZCB0aGUgcHVibGljIGNlcnRpZmljYXRlIGZpbGUgJHtyb290Q0FDZXJ0UGF0aH0sIHBsZWFzZSBjaGVjayB0aGUgZmlsZSBleGlzdHMgYW5kIHRyeSBhZ2Fpbi5gXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICByZXMuc2VuZChmcy5yZWFkRmlsZVN5bmMocm9vdENBQ2VydFBhdGgsICd1dGY4JykpO1xuICAgICAgfSk7XG5cbiAgICAgIGNvbnN0IGh0dHBzU2VydmVyID0gaHR0cHMuY3JlYXRlU2VydmVyKGNyZWRlbnRpYWxzLCBhcHApO1xuICAgICAgY29uc3Qgc2VydmVyID0gaHR0cHNTZXJ2ZXIubGlzdGVuKHBvcnQsICgpID0+XG4gICAgICAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgc3RhcnRlZCBhdCBwb3J0OiAke3BvcnR9XFxuXG4gICAgICAgIC0tLVxcblxuICAgICAgICBTVEFURTogUkVBRFlfRk9SX0NPTk5FQ1RJT05cXG5cbiAgICAgICAgLS0tXFxuYClcbiAgICAgICk7XG5cbiAgICAgIGFwcC5nZXQoJy9jbG9zZV9yZW1vdGVfc2VydmVyJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgIHJlcy5zZW5kKGBDbG9zaW5nIHJlbW90ZSBzZXJ2ZXJgKTtcbiAgICAgICAgc2VydmVyLmNsb3NlKCgpID0+IHtcbiAgICAgICAgICBjb25zb2xlLmxvZyhgUmVtb3RlIHNlcnZlciBjbG9zZWQgc3VjY2Vzc2Z1bGx5XFxuXG4gICAgICAgICAgLS0tXFxuXG4gICAgICAgICAgU1RBVEU6IFJFTU9URV9DT05ORUNUSU9OX0NMT1NFRFxcblxuICAgICAgICAgIC0tLVxcbmApO1xuICAgICAgICB9KTtcbiAgICAgIH0pO1xuICAgIH1cbiAgKTtcbn1cblxuZXhwb3J0IGRlZmF1bHQgYWRkUmVtb3RlQ29tbWFuZDtcbiJdfQ==