"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../src/constants");
const express = require("express");
const https = require("https");
const fs = require("fs");
function assertIsPositiveInteger(arg, label) {
    if (typeof arg !== 'number' &&
        arg !== parseInt('' + arg) &&
        typeof arg === 'number' &&
        arg <= 0)
        throw new Error(`expected ${label} to be a positive integer. Found: ${JSON.stringify(arg)}`);
}
function assertIsString(arg, label) {
    if (typeof arg !== 'string')
        throw new Error(`expected ${label} to be a string. Found: ${JSON.stringify(arg)}`);
}
function addRemoteCommand(y) {
    return y.command('remote', 'connect to the remote machine to facilitate trusting the certs', yarg => {
        yarg.option('port', {
            describe: 'port number where the remote host should be connected',
            default: constants_1.DEFAULT_REMOTE_PORT
        });
        yarg.option('cert', {
            describe: 'certificate details',
            required: true
        });
        yarg.option('key', {
            describe: 'private key details',
            required: true
        });
    }, argv => {
        const { port, cert, key } = argv;
        console.log('the redatatatata', cert);
        assertIsPositiveInteger(port, 'port');
        assertIsString(cert, 'cert');
        assertIsString(key, 'key');
        const app = express();
        const credentials = { key, cert };
        console.log('ceredentialsss', key);
        app.get('/get_remote_certificate', (req, res) => {
            if (fs.existsSync(constants_1.rootCACertPath)) {
                res.send(fs.readFileSync(constants_1.rootCACertPath, 'utf8'));
            }
        });
        const httpsServer = https.createServer(credentials, app);
        const server = httpsServer.listen(port, () => console.log(`Server started at port: ${port}\n
        ---\n
        STATE: READY_FOR_CONNECTION\n
        ---\n`));
        app.get('/close_remote_server', (req, res) => {
            res.send(`Closing remote server`);
            server.close(() => {
                console.log(`Remote server closed successfully\n
          ---\n
          STATE: REMOTE_CONNECTION_CLOSED\n
          ---\n`);
            });
        });
    });
}
exports.default = addRemoteCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJjbGkvY29tbWFuZHMvcmVtb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbURBQTBFO0FBQzFFLG1DQUFtQztBQUNuQywrQkFBK0I7QUFDL0IseUJBQXlCO0FBRXpCLFNBQVMsdUJBQXVCLENBQzlCLEdBQVksRUFDWixLQUFhO0lBRWIsSUFDRSxPQUFPLEdBQUcsS0FBSyxRQUFRO1FBQ3ZCLEdBQUcsS0FBSyxRQUFRLENBQUMsRUFBRSxHQUFHLEdBQUcsQ0FBQztRQUMxQixPQUFPLEdBQUcsS0FBSyxRQUFRO1FBQ3ZCLEdBQUcsSUFBSSxDQUFDO1FBRVIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLEtBQUsscUNBQXFDLElBQUksQ0FBQyxTQUFTLENBQ2xFLEdBQUcsQ0FDSixFQUFFLENBQ0osQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGNBQWMsQ0FBQyxHQUFZLEVBQUUsS0FBYTtJQUNqRCxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVE7UUFDekIsTUFBTSxJQUFJLEtBQUssQ0FDYixZQUFZLEtBQUssMkJBQTJCLElBQUksQ0FBQyxTQUFTLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FDbEUsQ0FBQztBQUNOLENBQUM7QUFFRCxTQUFTLGdCQUFnQixDQUFDLENBQWlCO0lBQ3pDLE9BQU8sQ0FBQyxDQUFDLE9BQU8sQ0FDZCxRQUFRLEVBQ1IsZ0VBQWdFLEVBQ2hFLElBQUksQ0FBQyxFQUFFO1FBQ0wsSUFBSSxDQUFDLE1BQU0sQ0FBQyxNQUFNLEVBQUU7WUFDbEIsUUFBUSxFQUFFLHVEQUF1RDtZQUNqRSxPQUFPLEVBQUUsK0JBQW1CO1NBQzdCLENBQUMsQ0FBQztRQUNILElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2xCLFFBQVEsRUFBRSxxQkFBcUI7WUFDL0IsUUFBUSxFQUFFLElBQUk7U0FDZixDQUFDLENBQUM7UUFDSCxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssRUFBRTtZQUNqQixRQUFRLEVBQUUscUJBQXFCO1lBQy9CLFFBQVEsRUFBRSxJQUFJO1NBQ2YsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxFQUNELElBQUksQ0FBQyxFQUFFO1FBQ0wsTUFBTSxFQUFFLElBQUksRUFBRSxJQUFJLEVBQUUsR0FBRyxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2pDLE9BQU8sQ0FBQyxHQUFHLENBQUMsa0JBQWtCLEVBQUUsSUFBSSxDQUFDLENBQUE7UUFDckMsdUJBQXVCLENBQUMsSUFBSSxFQUFFLE1BQU0sQ0FBQyxDQUFDO1FBQ3RDLGNBQWMsQ0FBQyxJQUFJLEVBQUUsTUFBTSxDQUFDLENBQUM7UUFDN0IsY0FBYyxDQUFDLEdBQUcsRUFBRSxLQUFLLENBQUMsQ0FBQztRQUMzQixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztRQUN0QixNQUFNLFdBQVcsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLEVBQUUsQ0FBQztRQUNsQyxPQUFPLENBQUMsR0FBRyxDQUFDLGdCQUFnQixFQUFFLEdBQUcsQ0FBQyxDQUFDO1FBQ25DLEdBQUcsQ0FBQyxHQUFHLENBQUMseUJBQXlCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDOUMsSUFBSSxFQUFFLENBQUMsVUFBVSxDQUFDLDBCQUFjLENBQUMsRUFBRTtnQkFDakMsR0FBRyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsWUFBWSxDQUFDLDBCQUFjLEVBQUUsTUFBTSxDQUFDLENBQUMsQ0FBQzthQUNuRDtRQUNILENBQUMsQ0FBQyxDQUFDO1FBRUgsTUFBTSxXQUFXLEdBQUcsS0FBSyxDQUFDLFlBQVksQ0FBQyxXQUFXLEVBQUUsR0FBRyxDQUFDLENBQUM7UUFDekQsTUFBTSxNQUFNLEdBQUcsV0FBVyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQzNDLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLElBQUk7OztjQUdyQyxDQUFDLENBQ1IsQ0FBQztRQUVGLEdBQUcsQ0FBQyxHQUFHLENBQUMsc0JBQXNCLEVBQUUsQ0FBQyxHQUFHLEVBQUUsR0FBRyxFQUFFLEVBQUU7WUFDM0MsR0FBRyxDQUFDLElBQUksQ0FBQyx1QkFBdUIsQ0FBQyxDQUFDO1lBQ2xDLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO2dCQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDOzs7Z0JBR04sQ0FBQyxDQUFDO1lBQ1YsQ0FBQyxDQUFDLENBQUM7UUFDTCxDQUFDLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FDRixDQUFDO0FBQ0osQ0FBQztBQUVELGtCQUFlLGdCQUFnQixDQUFDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0ICogYXMgeWFyZ3MgZnJvbSAneWFyZ3MnO1xuaW1wb3J0IHsgcm9vdENBQ2VydFBhdGgsIERFRkFVTFRfUkVNT1RFX1BPUlQgfSBmcm9tICcuLi8uLi9zcmMvY29uc3RhbnRzJztcbmltcG9ydCAqIGFzIGV4cHJlc3MgZnJvbSAnZXhwcmVzcyc7XG5pbXBvcnQgKiBhcyBodHRwcyBmcm9tICdodHRwcyc7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmZ1bmN0aW9uIGFzc2VydElzUG9zaXRpdmVJbnRlZ2VyKFxuICBhcmc6IHVua25vd24sXG4gIGxhYmVsOiBzdHJpbmdcbik6IGFzc2VydHMgYXJnIGlzIG51bWJlciB7XG4gIGlmIChcbiAgICB0eXBlb2YgYXJnICE9PSAnbnVtYmVyJyAmJlxuICAgIGFyZyAhPT0gcGFyc2VJbnQoJycgKyBhcmcpICYmXG4gICAgdHlwZW9mIGFyZyA9PT0gJ251bWJlcicgJiZcbiAgICBhcmcgPD0gMFxuICApXG4gICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgYGV4cGVjdGVkICR7bGFiZWx9IHRvIGJlIGEgcG9zaXRpdmUgaW50ZWdlci4gRm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkoXG4gICAgICAgIGFyZ1xuICAgICAgKX1gXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gYXNzZXJ0SXNTdHJpbmcoYXJnOiB1bmtub3duLCBsYWJlbDogc3RyaW5nKTogYXNzZXJ0cyBhcmcgaXMgc3RyaW5nIHtcbiAgaWYgKHR5cGVvZiBhcmcgIT09ICdzdHJpbmcnKVxuICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgIGBleHBlY3RlZCAke2xhYmVsfSB0byBiZSBhIHN0cmluZy4gRm91bmQ6ICR7SlNPTi5zdHJpbmdpZnkoYXJnKX1gXG4gICAgKTtcbn1cblxuZnVuY3Rpb24gYWRkUmVtb3RlQ29tbWFuZCh5OiB5YXJncy5Bcmd2PHt9Pik6IHlhcmdzLkFyZ3Y8e30+IHtcbiAgcmV0dXJuIHkuY29tbWFuZChcbiAgICAncmVtb3RlJyxcbiAgICAnY29ubmVjdCB0byB0aGUgcmVtb3RlIG1hY2hpbmUgdG8gZmFjaWxpdGF0ZSB0cnVzdGluZyB0aGUgY2VydHMnLFxuICAgIHlhcmcgPT4ge1xuICAgICAgeWFyZy5vcHRpb24oJ3BvcnQnLCB7XG4gICAgICAgIGRlc2NyaWJlOiAncG9ydCBudW1iZXIgd2hlcmUgdGhlIHJlbW90ZSBob3N0IHNob3VsZCBiZSBjb25uZWN0ZWQnLFxuICAgICAgICBkZWZhdWx0OiBERUZBVUxUX1JFTU9URV9QT1JUXG4gICAgICB9KTtcbiAgICAgIHlhcmcub3B0aW9uKCdjZXJ0Jywge1xuICAgICAgICBkZXNjcmliZTogJ2NlcnRpZmljYXRlIGRldGFpbHMnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgICB5YXJnLm9wdGlvbigna2V5Jywge1xuICAgICAgICBkZXNjcmliZTogJ3ByaXZhdGUga2V5IGRldGFpbHMnLFxuICAgICAgICByZXF1aXJlZDogdHJ1ZVxuICAgICAgfSk7XG4gICAgfSxcbiAgICBhcmd2ID0+IHtcbiAgICAgIGNvbnN0IHsgcG9ydCwgY2VydCwga2V5IH0gPSBhcmd2O1xuICAgICAgY29uc29sZS5sb2coJ3RoZSByZWRhdGF0YXRhdGEnLCBjZXJ0KVxuICAgICAgYXNzZXJ0SXNQb3NpdGl2ZUludGVnZXIocG9ydCwgJ3BvcnQnKTtcbiAgICAgIGFzc2VydElzU3RyaW5nKGNlcnQsICdjZXJ0Jyk7XG4gICAgICBhc3NlcnRJc1N0cmluZyhrZXksICdrZXknKTtcbiAgICAgIGNvbnN0IGFwcCA9IGV4cHJlc3MoKTtcbiAgICAgIGNvbnN0IGNyZWRlbnRpYWxzID0geyBrZXksIGNlcnQgfTtcbiAgICAgIGNvbnNvbGUubG9nKCdjZXJlZGVudGlhbHNzcycsIGtleSk7XG4gICAgICBhcHAuZ2V0KCcvZ2V0X3JlbW90ZV9jZXJ0aWZpY2F0ZScsIChyZXEsIHJlcykgPT4ge1xuICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhyb290Q0FDZXJ0UGF0aCkpIHtcbiAgICAgICAgICByZXMuc2VuZChmcy5yZWFkRmlsZVN5bmMocm9vdENBQ2VydFBhdGgsICd1dGY4JykpO1xuICAgICAgICB9XG4gICAgICB9KTtcblxuICAgICAgY29uc3QgaHR0cHNTZXJ2ZXIgPSBodHRwcy5jcmVhdGVTZXJ2ZXIoY3JlZGVudGlhbHMsIGFwcCk7XG4gICAgICBjb25zdCBzZXJ2ZXIgPSBodHRwc1NlcnZlci5saXN0ZW4ocG9ydCwgKCkgPT5cbiAgICAgICAgY29uc29sZS5sb2coYFNlcnZlciBzdGFydGVkIGF0IHBvcnQ6ICR7cG9ydH1cXG5cbiAgICAgICAgLS0tXFxuXG4gICAgICAgIFNUQVRFOiBSRUFEWV9GT1JfQ09OTkVDVElPTlxcblxuICAgICAgICAtLS1cXG5gKVxuICAgICAgKTtcblxuICAgICAgYXBwLmdldCgnL2Nsb3NlX3JlbW90ZV9zZXJ2ZXInLCAocmVxLCByZXMpID0+IHtcbiAgICAgICAgcmVzLnNlbmQoYENsb3NpbmcgcmVtb3RlIHNlcnZlcmApO1xuICAgICAgICBzZXJ2ZXIuY2xvc2UoKCkgPT4ge1xuICAgICAgICAgIGNvbnNvbGUubG9nKGBSZW1vdGUgc2VydmVyIGNsb3NlZCBzdWNjZXNzZnVsbHlcXG5cbiAgICAgICAgICAtLS1cXG5cbiAgICAgICAgICBTVEFURTogUkVNT1RFX0NPTk5FQ1RJT05fQ0xPU0VEXFxuXG4gICAgICAgICAgLS0tXFxuYCk7XG4gICAgICAgIH0pO1xuICAgICAgfSk7XG4gICAgfVxuICApO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRSZW1vdGVDb21tYW5kO1xuIl19