"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const constants_1 = require("../../src/constants");
const express = require("express");
const fs = require("fs");
function addCleanCommand(y) {
    return y
        .command('remote [hostname]', 'connect to remote server', yarg => {
        yarg
            .positional('hostname', {
            describe: 'hostname of remote machine'
        })
            .option('port', {
            describe: 'port number where the remote host should be connected',
            default: 3000
        });
    }, argv => {
        const { hostname, port } = argv;
        if (hostname && port) {
            const app = express();
            app.get('/getRemoteCertificate', (req, res) => {
                if (fs.existsSync(constants_1.rootCACertPath)) {
                    res.send(fs.readFileSync(constants_1.rootCACertPath, 'utf8'));
                }
            });
            const server = app.listen(port, () => console.log(`Server started at port: ${port}`));
            app.get('/closeRemoteServer', (req, res) => {
                res.send('Server closing');
                server.close(() => {
                    console.log('Process terminated');
                });
            });
        }
    })
        .check(({ hostname }) => {
        if (!hostname || (typeof hostname === 'string' && !hostname.trim())) {
            throw new Error('hostname is required');
        }
        return true;
    });
}
exports.default = addCleanCommand;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJjbGkvY29tbWFuZHMvcmVtb3RlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQ0EsbURBQXFEO0FBQ3JELG1DQUFvQztBQUNwQyx5QkFBeUI7QUFFekIsU0FBUyxlQUFlLENBQUMsQ0FBaUI7SUFDeEMsT0FBTyxDQUFDO1NBQ0wsT0FBTyxDQUNOLG1CQUFtQixFQUNuQiwwQkFBMEIsRUFDMUIsSUFBSSxDQUFDLEVBQUU7UUFDTCxJQUFJO2FBQ0QsVUFBVSxDQUFDLFVBQVUsRUFBRTtZQUN0QixRQUFRLEVBQUUsNEJBQTRCO1NBQ3ZDLENBQUM7YUFDRCxNQUFNLENBQUMsTUFBTSxFQUFFO1lBQ2QsUUFBUSxFQUFFLHVEQUF1RDtZQUNqRSxPQUFPLEVBQUUsSUFBSTtTQUNkLENBQUMsQ0FBQztJQUNQLENBQUMsRUFDRCxJQUFJLENBQUMsRUFBRTtRQUNMLE1BQU0sRUFBRSxRQUFRLEVBQUUsSUFBSSxFQUFFLEdBQUcsSUFBSSxDQUFDO1FBQ2hDLElBQUksUUFBUSxJQUFJLElBQUksRUFBRTtZQUNwQixNQUFNLEdBQUcsR0FBRyxPQUFPLEVBQUUsQ0FBQztZQUN0QixHQUFHLENBQUMsR0FBRyxDQUFDLHVCQUF1QixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUM1QyxJQUFJLEVBQUUsQ0FBQyxVQUFVLENBQUMsMEJBQWMsQ0FBQyxFQUFFO29CQUNqQyxHQUFHLENBQUMsSUFBSSxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsMEJBQWMsRUFBRSxNQUFNLENBQUMsQ0FBQyxDQUFDO2lCQUNuRDtZQUNILENBQUMsQ0FBQyxDQUFDO1lBRUgsTUFBTSxNQUFNLEdBQUcsR0FBRyxDQUFDLE1BQU0sQ0FBQyxJQUFJLEVBQUUsR0FBRyxFQUFFLENBQ25DLE9BQU8sQ0FBQyxHQUFHLENBQUMsMkJBQTJCLElBQUksRUFBRSxDQUFDLENBQy9DLENBQUM7WUFFRixHQUFHLENBQUMsR0FBRyxDQUFDLG9CQUFvQixFQUFFLENBQUMsR0FBRyxFQUFFLEdBQUcsRUFBRSxFQUFFO2dCQUN6QyxHQUFHLENBQUMsSUFBSSxDQUFDLGdCQUFnQixDQUFDLENBQUM7Z0JBQzNCLE1BQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFO29CQUNoQixPQUFPLENBQUMsR0FBRyxDQUFDLG9CQUFvQixDQUFDLENBQUM7Z0JBQ3BDLENBQUMsQ0FBQyxDQUFDO1lBQ0wsQ0FBQyxDQUFDLENBQUM7U0FDSjtJQUNILENBQUMsQ0FDRjtTQUNBLEtBQUssQ0FBQyxDQUFDLEVBQUUsUUFBUSxFQUFFLEVBQUUsRUFBRTtRQUN0QixJQUFJLENBQUMsUUFBUSxJQUFJLENBQUMsT0FBTyxRQUFRLEtBQUssUUFBUSxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLEVBQUU7WUFDbkUsTUFBTSxJQUFJLEtBQUssQ0FBQyxzQkFBc0IsQ0FBQyxDQUFDO1NBQ3pDO1FBQ0QsT0FBTyxJQUFJLENBQUM7SUFDZCxDQUFDLENBQUMsQ0FBQztBQUNQLENBQUM7QUFFRCxrQkFBZSxlQUFlLENBQUMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgKiBhcyB5YXJncyBmcm9tICd5YXJncyc7XG5pbXBvcnQgeyByb290Q0FDZXJ0UGF0aCB9IGZyb20gJy4uLy4uL3NyYy9jb25zdGFudHMnO1xuaW1wb3J0IGV4cHJlc3MgPSByZXF1aXJlKCdleHByZXNzJyk7XG5pbXBvcnQgKiBhcyBmcyBmcm9tICdmcyc7XG5cbmZ1bmN0aW9uIGFkZENsZWFuQ29tbWFuZCh5OiB5YXJncy5Bcmd2PHt9Pik6IHlhcmdzLkFyZ3Y8e30+IHtcbiAgcmV0dXJuIHlcbiAgICAuY29tbWFuZChcbiAgICAgICdyZW1vdGUgW2hvc3RuYW1lXScsXG4gICAgICAnY29ubmVjdCB0byByZW1vdGUgc2VydmVyJyxcbiAgICAgIHlhcmcgPT4ge1xuICAgICAgICB5YXJnXG4gICAgICAgICAgLnBvc2l0aW9uYWwoJ2hvc3RuYW1lJywge1xuICAgICAgICAgICAgZGVzY3JpYmU6ICdob3N0bmFtZSBvZiByZW1vdGUgbWFjaGluZSdcbiAgICAgICAgICB9KVxuICAgICAgICAgIC5vcHRpb24oJ3BvcnQnLCB7XG4gICAgICAgICAgICBkZXNjcmliZTogJ3BvcnQgbnVtYmVyIHdoZXJlIHRoZSByZW1vdGUgaG9zdCBzaG91bGQgYmUgY29ubmVjdGVkJyxcbiAgICAgICAgICAgIGRlZmF1bHQ6IDMwMDBcbiAgICAgICAgICB9KTtcbiAgICAgIH0sXG4gICAgICBhcmd2ID0+IHtcbiAgICAgICAgY29uc3QgeyBob3N0bmFtZSwgcG9ydCB9ID0gYXJndjtcbiAgICAgICAgaWYgKGhvc3RuYW1lICYmIHBvcnQpIHtcbiAgICAgICAgICBjb25zdCBhcHAgPSBleHByZXNzKCk7XG4gICAgICAgICAgYXBwLmdldCgnL2dldFJlbW90ZUNlcnRpZmljYXRlJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICBpZiAoZnMuZXhpc3RzU3luYyhyb290Q0FDZXJ0UGF0aCkpIHtcbiAgICAgICAgICAgICAgcmVzLnNlbmQoZnMucmVhZEZpbGVTeW5jKHJvb3RDQUNlcnRQYXRoLCAndXRmOCcpKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9KTtcblxuICAgICAgICAgIGNvbnN0IHNlcnZlciA9IGFwcC5saXN0ZW4ocG9ydCwgKCkgPT5cbiAgICAgICAgICAgIGNvbnNvbGUubG9nKGBTZXJ2ZXIgc3RhcnRlZCBhdCBwb3J0OiAke3BvcnR9YClcbiAgICAgICAgICApO1xuXG4gICAgICAgICAgYXBwLmdldCgnL2Nsb3NlUmVtb3RlU2VydmVyJywgKHJlcSwgcmVzKSA9PiB7XG4gICAgICAgICAgICByZXMuc2VuZCgnU2VydmVyIGNsb3NpbmcnKTtcbiAgICAgICAgICAgIHNlcnZlci5jbG9zZSgoKSA9PiB7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKCdQcm9jZXNzIHRlcm1pbmF0ZWQnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgKVxuICAgIC5jaGVjaygoeyBob3N0bmFtZSB9KSA9PiB7XG4gICAgICBpZiAoIWhvc3RuYW1lIHx8ICh0eXBlb2YgaG9zdG5hbWUgPT09ICdzdHJpbmcnICYmICFob3N0bmFtZS50cmltKCkpKSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcignaG9zdG5hbWUgaXMgcmVxdWlyZWQnKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiB0cnVlO1xuICAgIH0pO1xufVxuXG5leHBvcnQgZGVmYXVsdCBhZGRDbGVhbkNvbW1hbmQ7XG4iXX0=