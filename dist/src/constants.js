"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const path = require("path");
const fs_1 = require("fs");
const mkdirp_1 = require("mkdirp");
const lodash_1 = require("lodash");
const eol = require("eol");
const utils_1 = require("./utils");
const applicationConfigPath = require("application-config-path");
const _createDebug = require("debug");
const debug = _createDebug('devcert:constants');
// Platform shortcuts
exports.isMac = process.platform === 'darwin';
exports.isLinux = process.platform === 'linux';
exports.isWindows = process.platform === 'win32';
// Common paths
exports.configDir = applicationConfigPath('devcert');
exports.configPath = path.join.bind(path, exports.configDir);
exports.domainsDir = exports.configPath('domains');
exports.caVersionFile = exports.configPath('devcert-ca-version');
exports.opensslSerialFilePath = exports.configPath('certificate-authority', 'serial');
exports.opensslDatabaseFilePath = exports.configPath('certificate-authority', 'index.txt');
exports.caSelfSignConfig = path.join(__dirname, '../openssl-configurations/certificate-authority-self-signing.conf');
function includeWildcards(list) {
    return list.reduce((outlist, item) => {
        outlist.push(item, `*.${item}`);
        return outlist;
    }, []);
}
async function withDomainSigningRequestConfig(commonName, { alternativeNames }, cb) {
    const tmp = utils_1.tmpDir();
    const tmpFile = path.join(tmp.name, 'domain-certificate-signing-requests.conf');
    const source = fs_1.readFileSync(path.join(__dirname, '../openssl-configurations/domain-certificate-signing-requests.conf'), 'utf-8');
    const template = lodash_1.template(source);
    const result = template({
        commonName,
        altNames: includeWildcards([commonName, ...alternativeNames])
    });
    fs_1.writeFileSync(tmpFile, eol.auto(result));
    await cb(tmpFile);
    fs_1.unlinkSync(tmpFile);
    tmp.removeCallback();
}
exports.withDomainSigningRequestConfig = withDomainSigningRequestConfig;
async function withDomainCertificateConfig(commonName, alternativeNames, cb) {
    const tmp = utils_1.tmpDir();
    const tmpFile = path.join(tmp.name, 'ca.cfg');
    const source = fs_1.readFileSync(path.join(__dirname, '../openssl-configurations/domain-certificates.conf'), 'utf-8');
    const template = lodash_1.template(source);
    const result = template({
        commonName,
        altNames: includeWildcards([commonName, ...alternativeNames]),
        serialFile: exports.opensslSerialFilePath,
        databaseFile: exports.opensslDatabaseFilePath,
        domainDir: utils_1.pathForDomain(commonName)
    });
    fs_1.writeFileSync(tmpFile, eol.auto(result));
    await cb(tmpFile);
    fs_1.unlinkSync(tmpFile);
    tmp.removeCallback();
}
exports.withDomainCertificateConfig = withDomainCertificateConfig;
// confTemplate = confTemplate.replace(/DATABASE_PATH/, configPath('index.txt').replace(/\\/g, '\\\\'));
// confTemplate = confTemplate.replace(/SERIAL_PATH/, configPath('serial').replace(/\\/g, '\\\\'));
// confTemplate = eol.auto(confTemplate);
exports.rootCADir = exports.configPath('certificate-authority');
exports.rootCAKeyPath = path.join(exports.rootCADir, 'private-key.key');
exports.rootCACertPath = path.join(exports.rootCADir, 'certificate.cert');
debug('rootCACertPath', exports.rootCACertPath);
debug('rootCAKeyPath', exports.rootCAKeyPath);
debug('rootCADir', exports.rootCADir);
// Exposed for uninstallation purposes.
function getLegacyConfigDir() {
    if (exports.isWindows && process.env.LOCALAPPDATA) {
        return path.join(process.env.LOCALAPPDATA, 'devcert', 'config');
    }
    else {
        const uid = process.getuid && process.getuid();
        const userHome = exports.isLinux && uid === 0
            ? path.resolve('/usr/local/share')
            : require('os').homedir();
        return path.join(userHome, '.config', 'devcert');
    }
}
exports.getLegacyConfigDir = getLegacyConfigDir;
function ensureConfigDirs() {
    mkdirp_1.sync(exports.configDir);
    mkdirp_1.sync(exports.domainsDir);
    mkdirp_1.sync(exports.rootCADir);
}
exports.ensureConfigDirs = ensureConfigDirs;
ensureConfigDirs();
//# sourceMappingURL=data:application/json;base64,