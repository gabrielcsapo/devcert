"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = require("fs");
const createDebug = require("debug");
const constants_1 = require("./constants");
const platforms_1 = require("./platforms");
const utils_1 = require("./utils");
const certificates_1 = require("./certificates");
const path_1 = require("path");
const debug = createDebug('devcert:certificate-authority');
/**
 * Install the once-per-machine trusted root CA. We'll use this CA to sign
 * per-app certs.
 */
async function installCertificateAuthority(options = {}, certOptions) {
    debug(`Uninstalling existing certificates, which will be void once any existing CA is gone`);
    uninstall();
    constants_1.ensureConfigDirs();
    const tmp = utils_1.tmpDir();
    debug(`Making a temp working directory for files to copied in`);
    const rootKeyPath = path_1.join(tmp.name, 'ca.key');
    debug(`Generating the OpenSSL configuration needed to setup the certificate authority`);
    seedConfigFiles();
    debug(`Generating a private key`);
    certificates_1.generateKey(rootKeyPath);
    debug(`Generating a CA certificate`);
    utils_1.openssl(`req -new -x509 -config "${constants_1.caSelfSignConfig}" -key "${rootKeyPath}" -out "${constants_1.rootCACertPath}" -days ${certOptions.caCertExpiry}`, 'generating CA CSR');
    debug('Saving certificate authority credentials');
    await saveCertificateAuthorityCredentials(rootKeyPath);
    debug(`Adding the root certificate authority to trust stores`);
    await platforms_1.default.addToTrustStores(constants_1.rootCACertPath, options);
}
exports.default = installCertificateAuthority;
/**
 * Initializes the files OpenSSL needs to sign certificates as a certificate
 * authority, as well as our CA setup version
 */
function seedConfigFiles() {
    // This is v2 of the devcert certificate authority setup
    fs_1.writeFileSync(constants_1.caVersionFile, '2');
    // OpenSSL CA files
    fs_1.writeFileSync(constants_1.opensslDatabaseFilePath, '');
    fs_1.writeFileSync(constants_1.opensslSerialFilePath, '01');
}
async function withCertificateAuthorityCredentials(cb) {
    debug(`Retrieving devcert's certificate authority credentials`);
    const tmp = utils_1.tmpDir();
    const caKeyPath = path_1.join(tmp.name, 'ca.key');
    const caCertPath = path_1.join(caKeyPath, '..', 'ca.crt');
    const caKey = await platforms_1.default.readProtectedFile(constants_1.rootCAKeyPath);
    const caCrt = await platforms_1.default.readProtectedFile(constants_1.rootCACertPath);
    fs_1.writeFileSync(caKeyPath, caKey);
    fs_1.writeFileSync(caCertPath, caCrt);
    await cb({ caKeyPath, caCertPath });
    fs_1.unlinkSync(caKeyPath);
    fs_1.unlinkSync(caCertPath);
    tmp.removeCallback();
}
exports.withCertificateAuthorityCredentials = withCertificateAuthorityCredentials;
async function saveCertificateAuthorityCredentials(keypath) {
    debug(`Saving devcert's certificate authority credentials`);
    const key = fs_1.readFileSync(keypath, 'utf-8');
    await platforms_1.default.writeProtectedFile(constants_1.rootCAKeyPath, key);
}
function certErrors() {
    try {
        utils_1.openssl(`x509 -in "${constants_1.rootCACertPath}" -noout`, 'checking for certificate errors');
        return '';
    }
    catch (e) {
        return e.toString();
    }
}
// This function helps to migrate from v1.0.x to >= v1.1.0.
/**
 * Smoothly migrate the certificate storage from v1.0.x to >= v1.1.0.
 * In v1.1.0 there are new options for retrieving the CA cert directly,
 * to help third-party Node apps trust the root CA.
 *
 * If a v1.0.x cert already exists, then devcert has written it with
 * platform.writeProtectedFile(), so an unprivileged readFile cannot access it.
 * Pre-detect and remedy this; it should only happen once per installation.
 */
async function ensureCACertReadable(options, certOptions) {
    if (!certErrors()) {
        return;
    }
    /**
     * on windows, writeProtectedFile left the cert encrypted on *nix, the cert
     * has no read permissions either way, openssl will fail and that means we
     * have to fix it
     */
    try {
        const caFileContents = await platforms_1.default.readProtectedFile(constants_1.rootCACertPath);
        platforms_1.default.deleteProtectedFiles(constants_1.rootCACertPath);
        fs_1.writeFileSync(constants_1.rootCACertPath, caFileContents);
    }
    catch (e) {
        return installCertificateAuthority(options, certOptions);
    }
    // double check that we have a live one
    const remainingErrors = certErrors();
    if (remainingErrors) {
        return installCertificateAuthority(options, certOptions);
    }
}
exports.ensureCACertReadable = ensureCACertReadable;
/**
 * Remove as much of the devcert files and state as we can. This is necessary
 * when generating a new root certificate, and should be available to API
 * consumers as well.
 *
 * Not all of it will be removable. If certutil is not installed, we'll leave
 * Firefox alone. We try to remove files with maximum permissions, and if that
 * fails, we'll silently fail.
 *
 * It's also possible that the command to untrust will not work, and we'll
 * silently fail that as well; with no existing certificates anymore, the
 * security exposure there is minimal.
 *
 * @public
 */
function uninstall() {
    platforms_1.default.removeFromTrustStores(constants_1.rootCACertPath);
    platforms_1.default.deleteProtectedFiles(constants_1.domainsDir);
    platforms_1.default.deleteProtectedFiles(constants_1.rootCADir);
    platforms_1.default.deleteProtectedFiles(constants_1.getLegacyConfigDir());
}
exports.uninstall = uninstall;
//# sourceMappingURL=data:application/json;base64,