"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const node_fetch_1 = require("node-fetch");
/**
 * Returns the remote box's certificate
 * @param hostname - hostname of the remote machine
 * @param port - port to connect the remote machine
 */
async function getRemoteCertificate(hostname, port) {
    const response = await node_fetch_1.default(`http://${hostname}:${port}/getRemoteCertificate`);
    return await response.text();
}
exports.getRemoteCertificate = getRemoteCertificate;
/**
 * Closes the remote server
 * @param hostname - hostname of the remote machine
 * @param port - port to connect the remote machine
 *
 * @public
 */
async function closeRemoteServer(hostname, port) {
    try {
        const response = await node_fetch_1.default(`http://${hostname}:${port}/closeRemoteServer`);
        return await response.text();
    }
    catch (err) {
        throw new Error(err);
    }
}
exports.closeRemoteServer = closeRemoteServer;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoicmVtb3RlLXV0aWxzLmpzIiwic291cmNlUm9vdCI6Ii4vIiwic291cmNlcyI6WyJzcmMvcmVtb3RlLXV0aWxzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsMkNBQStCO0FBRS9COzs7O0dBSUc7QUFDSSxLQUFLLFVBQVUsb0JBQW9CLENBQ3hDLFFBQWdCLEVBQ2hCLElBQVk7SUFFWixNQUFNLFFBQVEsR0FBRyxNQUFNLG9CQUFLLENBQzFCLFVBQVUsUUFBUSxJQUFJLElBQUksdUJBQXVCLENBQ2xELENBQUM7SUFDRixPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0FBQy9CLENBQUM7QUFSRCxvREFRQztBQUVEOzs7Ozs7R0FNRztBQUNJLEtBQUssVUFBVSxpQkFBaUIsQ0FDckMsUUFBZ0IsRUFDaEIsSUFBWTtJQUVaLElBQUk7UUFDRixNQUFNLFFBQVEsR0FBRyxNQUFNLG9CQUFLLENBQzFCLFVBQVUsUUFBUSxJQUFJLElBQUksb0JBQW9CLENBQy9DLENBQUM7UUFDRixPQUFPLE1BQU0sUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDO0tBQzlCO0lBQUMsT0FBTyxHQUFHLEVBQUU7UUFDWixNQUFNLElBQUksS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDO0tBQ3RCO0FBQ0gsQ0FBQztBQVpELDhDQVlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IGZldGNoIGZyb20gJ25vZGUtZmV0Y2gnO1xuXG4vKipcbiAqIFJldHVybnMgdGhlIHJlbW90ZSBib3gncyBjZXJ0aWZpY2F0ZVxuICogQHBhcmFtIGhvc3RuYW1lIC0gaG9zdG5hbWUgb2YgdGhlIHJlbW90ZSBtYWNoaW5lXG4gKiBAcGFyYW0gcG9ydCAtIHBvcnQgdG8gY29ubmVjdCB0aGUgcmVtb3RlIG1hY2hpbmVcbiAqL1xuZXhwb3J0IGFzeW5jIGZ1bmN0aW9uIGdldFJlbW90ZUNlcnRpZmljYXRlKFxuICBob3N0bmFtZTogc3RyaW5nLFxuICBwb3J0OiBudW1iZXJcbik6IFByb21pc2U8c3RyaW5nPiB7XG4gIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgYGh0dHA6Ly8ke2hvc3RuYW1lfToke3BvcnR9L2dldFJlbW90ZUNlcnRpZmljYXRlYFxuICApO1xuICByZXR1cm4gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xufVxuXG4vKipcbiAqIENsb3NlcyB0aGUgcmVtb3RlIHNlcnZlclxuICogQHBhcmFtIGhvc3RuYW1lIC0gaG9zdG5hbWUgb2YgdGhlIHJlbW90ZSBtYWNoaW5lXG4gKiBAcGFyYW0gcG9ydCAtIHBvcnQgdG8gY29ubmVjdCB0aGUgcmVtb3RlIG1hY2hpbmVcbiAqXG4gKiBAcHVibGljXG4gKi9cbmV4cG9ydCBhc3luYyBmdW5jdGlvbiBjbG9zZVJlbW90ZVNlcnZlcihcbiAgaG9zdG5hbWU6IHN0cmluZyxcbiAgcG9ydDogbnVtYmVyXG4pOiBQcm9taXNlPHN0cmluZz4ge1xuICB0cnkge1xuICAgIGNvbnN0IHJlc3BvbnNlID0gYXdhaXQgZmV0Y2goXG4gICAgICBgaHR0cDovLyR7aG9zdG5hbWV9OiR7cG9ydH0vY2xvc2VSZW1vdGVTZXJ2ZXJgXG4gICAgKTtcbiAgICByZXR1cm4gYXdhaXQgcmVzcG9uc2UudGV4dCgpO1xuICB9IGNhdGNoIChlcnIpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoZXJyKTtcbiAgfVxufVxuIl19